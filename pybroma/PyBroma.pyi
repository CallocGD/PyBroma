from typing import Optional

class ImmutableError(Exception):
    """The Property Given was not meant to be mutated"""

class Type:
    @property
    def name() -> str: ...
    def __eq__(self, __value: Type) -> bool: ...
    @property
    def is_struct(self) -> bool: ...

class MemberFunctionProto:
    @property
    def args(self) -> dict[str, Type]: ...
    @property
    def ret(self) -> Type: ...
    @property
    def is_const(self) -> bool: ...
    @property
    def is_virtual(self) -> bool: ...
    @property
    def is_callback(self) -> bool: ...
    @property
    def is_static(self) -> bool: ...
    @property
    def type(self) -> Type: ...
    @property
    def name(self) -> str: ...
    @property
    def attrs(self) -> Attributes:...
    @property
    def attributes(self) -> Attributes:...
    def __eq__(self, __value: MemberFunctionProto) -> bool: ...

class MemberField:
    @property
    def name(self) -> str: ...
    @property
    def type(self) -> Type: ...
    @property
    def count(self) -> int: ...

class Attributes:
    @property
    def docs(self) -> str: ...
    @property
    def links(self) -> int: ...
    @property
    def missing(self) -> int: ...
    @property
    def depends(self) -> int: ...

class FunctionBindField:
    @property
    def prototype(self) -> MemberFunctionProto: ...
    @property
    def binds(self) -> PlatformNumber: ...

class PadField:
    @property
    def amount(self) -> PlatformNumber: ...

class Field:
    @property
    def id(self) -> int: ...
    @property
    def parent(self) -> str: ...
    def getAsFunctionBindField(self) -> Optional[FunctionBindField]: ...
    def getAsMemberField(self) -> Optional[MemberField]: ...
    def getAsPadField(self) -> Optional[PadField]: ...
    def getAsInlineField(self) -> Optional[InlineField]: ...
    def get_fn() -> MemberFunctionProto:
        """Convenience function to get the function prototype of the field, if the field is a function of some sort."""
        ...

class PlatformNumber:
    @property
    def m1(self) -> int: ...
    @property
    def imac(self) -> int: ...
    @property
    def ios(self) -> int: ...
    @property
    def win(self) -> int: ...
    @property
    def android32(self) -> int: ...
    @property
    def android64(self) -> int: ...

    def platforms_as_dict(self) -> dict[str, str]:
        """Transforms the platform data given into a dictionary with the hex numbers next to each of them"""

class InlineField:
    @property
    def inner(self) -> str: ...

class FunctionProto:
    @property
    def args(self) -> dict[str, Type]: ...
    @property
    def ret(self) -> Type: ...
    @property
    def name(self) -> str: ...
    @property
    def docs(self) -> str: ...
    @property
    def attributes(self) -> Attributes: ...
    @property
    def attrs(self) -> Attributes: ...

class Function:
    @property
    def prototype(self) -> FunctionProto: ...
    @property
    def binds(self) -> PlatformNumber: ...

class Class:
    @property
    def name(self) -> str: ...
    @property
    def missing(self) -> int: ...
    @property
    def superclasses(self) -> list[str]: ...
    @property
    def depends(self) -> list[str]: ...
    @property
    def fields(self) -> list[Field]: ...
    @property
    def attrs(self) -> Attributes:...
    @property
    def attributes(self) -> Attributes:...

class Root:
    """Automatically Parses a given File and returns with a Parsed Broma File"""

    def __init__(self, fileName: str) -> None: ...
    def __getitem__(self, _class_name_: str) -> Optional[Class]:
        """Searches for a class object by Name"""

    def functionsAsDict(self) -> dict[str, Function]:
        """Converts Functions to A Dictionary"""

    def classesAsDict(self) -> dict[str, Class]:
        """Converts Classes to a dictionary (DEPRECATED! USE __getitem__ INSTEAD)"""

    @property
    def classes(self) -> list[Class]: ...
    @property
    def functions(self) -> list[Function]: ...
